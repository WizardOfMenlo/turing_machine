<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="150" onload="init(evt)" viewBox="0 0 1200 150" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="150.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="133" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="133" > </text>
<g id="frames">
<g >
<title>&lt;turing_machine::stats::TuringMachineStatsExt&lt;T&gt;&gt;::execute_and_get_result (521 samples, 0.68%)</title><rect x="693.8" y="53" width="8.0" height="15.0" fill="rgb(212,10,52)" rx="2" ry="2" />
<text  x="696.82" y="63.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::map::HashMap&lt;K, V, S&gt; as core::default::Default&gt;::default (2,765 samples, 3.60%)</title><rect x="406.5" y="53" width="42.5" height="15.0" fill="rgb(236,39,47)" rx="2" ry="2" />
<text  x="409.55" y="63.5" >&lt;st..</text>
</g>
<g >
<title>__rdl_alloc (297 samples, 0.39%)</title><rect x="791.5" y="69" width="4.6" height="15.0" fill="rgb(237,123,1)" rx="2" ry="2" />
<text  x="794.55" y="79.5" ></text>
</g>
<g >
<title>__rust_dealloc (137 samples, 0.18%)</title><rect x="801.6" y="69" width="2.1" height="15.0" fill="rgb(221,157,42)" rx="2" ry="2" />
<text  x="804.56" y="79.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1,235 samples, 1.61%)</title><rect x="26.6" y="69" width="19.0" height="15.0" fill="rgb(220,93,51)" rx="2" ry="2" />
<text  x="29.59" y="79.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::table::RawTable&lt;K, V&gt;&gt;::new_internal (199 samples, 0.26%)</title><rect x="206.8" y="69" width="3.1" height="15.0" fill="rgb(217,24,9)" rx="2" ry="2" />
<text  x="209.85" y="79.5" ></text>
</g>
<g >
<title>&lt;turing_machine::non_deterministic_tm::transition_table::NonDeterministicTransitionTable&lt;StateTy&gt; as turing_machine::transition_table::TransitionTable&lt;StateTy&gt;&gt;::apply_transition_table (3,588 samples, 4.67%)</title><rect x="307.9" y="69" width="55.1" height="15.0" fill="rgb(206,25,2)" rx="2" ry="2" />
<text  x="310.90" y="79.5" >&lt;turi..</text>
</g>
<g >
<title>all (76,832 samples, 100%)</title><rect x="10.0" y="101" width="1180.0" height="15.0" fill="rgb(220,3,11)" rx="2" ry="2" />
<text  x="13.00" y="111.5" ></text>
</g>
<g >
<title>[unknown] (1,479 samples, 1.92%)</title><rect x="701.8" y="53" width="22.7" height="15.0" fill="rgb(226,185,53)" rx="2" ry="2" />
<text  x="704.82" y="63.5" >[..</text>
</g>
<g >
<title>&lt;turing_machine::non_deterministic_tm::NonDeterministicTuringMachine&lt;StateTy&gt; as turing_machine::TuringMachine&gt;::is_accepting (326 samples, 0.42%)</title><rect x="209.9" y="69" width="5.0" height="15.0" fill="rgb(230,173,11)" rx="2" ry="2" />
<text  x="212.90" y="79.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::table::RawTable&lt;K, V&gt; as core::ops::drop::Drop&gt;::drop (257 samples, 0.33%)</title><rect x="506.0" y="53" width="3.9" height="15.0" fill="rgb(250,156,46)" rx="2" ry="2" />
<text  x="508.98" y="63.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::table::RawTable&lt;K, V&gt; as core::clone::Clone&gt;::clone (8,745 samples, 11.38%)</title><rect x="45.6" y="69" width="134.3" height="15.0" fill="rgb(231,176,13)" rx="2" ry="2" />
<text  x="48.55" y="79.5" >&lt;std::collection..</text>
</g>
<g >
<title>std::collections::hash::table::make_hash (2,621 samples, 3.41%)</title><rect x="742.3" y="53" width="40.3" height="15.0" fill="rgb(206,184,44)" rx="2" ry="2" />
<text  x="745.32" y="63.5" >std..</text>
</g>
<g >
<title>malloc (2,673 samples, 3.48%)</title><rect x="1083.1" y="69" width="41.0" height="15.0" fill="rgb(247,178,22)" rx="2" ry="2" />
<text  x="1086.08" y="79.5" >mal..</text>
</g>
<g >
<title>__rdl_dealloc (219 samples, 0.29%)</title><rect x="796.1" y="69" width="3.4" height="15.0" fill="rgb(211,54,8)" rx="2" ry="2" />
<text  x="799.11" y="79.5" ></text>
</g>
<g >
<title>_int_free (5,227 samples, 6.80%)</title><rect x="803.7" y="69" width="80.3" height="15.0" fill="rgb(236,109,20)" rx="2" ry="2" />
<text  x="806.71" y="79.5" >_int_free</text>
</g>
<g >
<title>main (76,832 samples, 100.00%)</title><rect x="10.0" y="85" width="1180.0" height="15.0" fill="rgb(216,125,38)" rx="2" ry="2" />
<text  x="13.00" y="95.5" >main</text>
</g>
<g >
<title>__memcmp_sse4_1 (314 samples, 0.41%)</title><rect x="724.5" y="53" width="4.9" height="15.0" fill="rgb(248,137,35)" rx="2" ry="2" />
<text  x="727.54" y="63.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::table::RawTable&lt;K, V&gt; as core::clone::Clone&gt;::clone (3,709 samples, 4.83%)</title><rect x="449.0" y="53" width="57.0" height="15.0" fill="rgb(250,214,4)" rx="2" ry="2" />
<text  x="452.01" y="63.5" >&lt;std::..</text>
</g>
<g >
<title>&lt;std::collections::hash::table::RawTable&lt;K, V&gt;&gt;::into_iter (604 samples, 0.79%)</title><rect x="197.6" y="69" width="9.2" height="15.0" fill="rgb(249,111,44)" rx="2" ry="2" />
<text  x="200.57" y="79.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::table::RawTable&lt;K, V&gt;&gt;::new_internal (245 samples, 0.32%)</title><rect x="509.9" y="53" width="3.8" height="15.0" fill="rgb(209,30,22)" rx="2" ry="2" />
<text  x="512.92" y="63.5" ></text>
</g>
<g >
<title>&lt;turing_machine::non_deterministic_tm::NonDeterministicTuringMachine&lt;StateTy&gt; as turing_machine::TuringMachine&gt;::step (6,055 samples, 7.88%)</title><rect x="214.9" y="69" width="93.0" height="15.0" fill="rgb(221,134,13)" rx="2" ry="2" />
<text  x="217.91" y="79.5" >&lt;turing_mac..</text>
</g>
<g >
<title>__rust_alloc (21 samples, 0.03%)</title><rect x="731.7" y="53" width="0.3" height="15.0" fill="rgb(249,16,49)" rx="2" ry="2" />
<text  x="734.70" y="63.5" ></text>
</g>
<g >
<title>&lt;turing_machine::non_deterministic_tm::NonDeterministicTuringMachine&lt;StateTy&gt; as turing_machine::TuringMachine&gt;::is_accepting (1,402 samples, 1.82%)</title><rect x="524.1" y="53" width="21.5" height="15.0" fill="rgb(251,167,37)" rx="2" ry="2" />
<text  x="527.12" y="63.5" >&lt;..</text>
</g>
<g >
<title>__memcmp_sse4_1 (312 samples, 0.41%)</title><rect x="719.7" y="37" width="4.8" height="15.0" fill="rgb(229,35,28)" rx="2" ry="2" />
<text  x="722.73" y="47.5" ></text>
</g>
<g >
<title>std::collections::hash::table::make_hash (2,462 samples, 3.20%)</title><rect x="1127.3" y="69" width="37.8" height="15.0" fill="rgb(228,50,17)" rx="2" ry="2" />
<text  x="1130.31" y="79.5" >std..</text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::Extend&lt;&amp;a T&gt;&gt;::extend (430 samples, 0.56%)</title><rect x="392.1" y="53" width="6.6" height="15.0" fill="rgb(218,158,31)" rx="2" ry="2" />
<text  x="395.13" y="63.5" ></text>
</g>
<g >
<title>_start (9 samples, 0.01%)</title><rect x="1061.5" y="69" width="0.1" height="15.0" fill="rgb(228,68,8)" rx="2" ry="2" />
<text  x="1064.48" y="79.5" ></text>
</g>
<g >
<title>__rust_alloc (136 samples, 0.18%)</title><rect x="799.5" y="69" width="2.1" height="15.0" fill="rgb(251,213,45)" rx="2" ry="2" />
<text  x="802.47" y="79.5" ></text>
</g>
<g >
<title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T, I&gt;&gt;::spec_extend (1,896 samples, 2.47%)</title><rect x="363.0" y="53" width="29.1" height="15.0" fill="rgb(214,75,33)" rx="2" ry="2" />
<text  x="366.01" y="63.5" >&lt;a..</text>
</g>
<g >
<title>std::collections::hash::map::RandomState::new::KEYS::__getit (179 samples, 0.23%)</title><rect x="739.6" y="53" width="2.7" height="15.0" fill="rgb(207,33,13)" rx="2" ry="2" />
<text  x="742.58" y="63.5" ></text>
</g>
<g >
<title>&lt;turing_machine::non_deterministic_tm::NonDeterministicTuringMachine&lt;StateTy&gt; as turing_machine::TuringMachine&gt;::step (8,463 samples, 11.01%)</title><rect x="555.5" y="53" width="129.9" height="15.0" fill="rgb(209,18,29)" rx="2" ry="2" />
<text  x="558.46" y="63.5" >&lt;turing_machine:..</text>
</g>
<g >
<title>turing_machine::utils::apply_action (1,620 samples, 2.11%)</title><rect x="1165.1" y="69" width="24.9" height="15.0" fill="rgb(225,16,50)" rx="2" ry="2" />
<text  x="1168.12" y="79.5" >t..</text>
</g>
<g >
<title>__rdl_alloc (151 samples, 0.20%)</title><rect x="729.4" y="53" width="2.3" height="15.0" fill="rgb(251,107,53)" rx="2" ry="2" />
<text  x="732.38" y="63.5" ></text>
</g>
<g >
<title>malloc (489 samples, 0.64%)</title><rect x="732.1" y="53" width="7.5" height="15.0" fill="rgb(233,149,16)" rx="2" ry="2" />
<text  x="735.07" y="63.5" ></text>
</g>
<g >
<title>&lt;turing_machine::non_deterministic_tm::transition_table::NonDeterministicTransitionTable&lt;StateTy&gt; as turing_machine::transition_table::TransitionTable&lt;StateTy&gt;&gt;::apply_transition_table (546 samples, 0.71%)</title><rect x="685.4" y="53" width="8.4" height="15.0" fill="rgb(219,226,38)" rx="2" ry="2" />
<text  x="688.44" y="63.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::table::RawTable&lt;K, V&gt; as core::ops::drop::Drop&gt;::drop (1,153 samples, 1.50%)</title><rect x="179.9" y="69" width="17.7" height="15.0" fill="rgb(250,198,39)" rx="2" ry="2" />
<text  x="182.86" y="79.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (1,396 samples, 1.82%)</title><rect x="1061.6" y="69" width="21.5" height="15.0" fill="rgb(226,152,34)" rx="2" ry="2" />
<text  x="1064.64" y="79.5" >c..</text>
</g>
<g >
<title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,079 samples, 1.40%)</title><rect x="10.0" y="69" width="16.6" height="15.0" fill="rgb(230,186,32)" rx="2" ry="2" />
<text  x="13.02" y="79.5" ></text>
</g>
<g >
<title>memcpy@GLIBC_2.2.5 (207 samples, 0.27%)</title><rect x="1124.1" y="69" width="3.2" height="15.0" fill="rgb(247,80,0)" rx="2" ry="2" />
<text  x="1127.13" y="79.5" ></text>
</g>
<g >
<title>__memmove_sse2_unaligned_erms (201 samples, 0.26%)</title><rect x="788.4" y="69" width="3.1" height="15.0" fill="rgb(225,191,51)" rx="2" ry="2" />
<text  x="791.44" y="79.5" ></text>
</g>
<g >
<title>&lt;turing_machine::non_deterministic_tm::NonDeterministicTuringMachine&lt;StateTy&gt; as turing_machine::TuringMachine&gt;::is_rejecting (1,164 samples, 1.51%)</title><rect x="701.8" y="37" width="17.9" height="15.0" fill="rgb(228,183,12)" rx="2" ry="2" />
<text  x="704.84" y="47.5" ></text>
</g>
<g >
<title>_int_malloc (11,557 samples, 15.04%)</title><rect x="884.0" y="69" width="177.5" height="15.0" fill="rgb(218,123,50)" rx="2" ry="2" />
<text  x="886.99" y="79.5" >_int_malloc</text>
</g>
<g >
<title>[unknown] (27,319 samples, 35.56%)</title><rect x="363.0" y="69" width="419.6" height="15.0" fill="rgb(214,164,43)" rx="2" ry="2" />
<text  x="366.01" y="79.5" >[unknown]</text>
</g>
<g >
<title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (509 samples, 0.66%)</title><rect x="398.7" y="53" width="7.8" height="15.0" fill="rgb(215,148,9)" rx="2" ry="2" />
<text  x="401.73" y="63.5" ></text>
</g>
<g >
<title>&lt;turing_machine::non_deterministic_tm::NonDeterministicTuringMachine&lt;StateTy&gt; as turing_machine::TuringMachine&gt;::is_rejecting (639 samples, 0.83%)</title><rect x="545.6" y="53" width="9.9" height="15.0" fill="rgb(215,69,20)" rx="2" ry="2" />
<text  x="548.65" y="63.5" ></text>
</g>
<g >
<title>__memcmp_sse4_1 (380 samples, 0.49%)</title><rect x="782.6" y="69" width="5.8" height="15.0" fill="rgb(231,74,49)" rx="2" ry="2" />
<text  x="785.61" y="79.5" ></text>
</g>
<g >
<title>&lt;std::collections::hash::table::RawTable&lt;K, V&gt;&gt;::raw_buckets (679 samples, 0.88%)</title><rect x="513.7" y="53" width="10.4" height="15.0" fill="rgb(221,123,16)" rx="2" ry="2" />
<text  x="516.69" y="63.5" ></text>
</g>
</g>
</svg>
